user nginx nginx;
worker_processes 2;
error_log /var/log/nginx/error.log;
worker_rlimit_nofile 8192;

events {
    worker_connections 4096;
}

http {
    # default settings for logs
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format   main '$remote_addr - $remote_user [$time_local]  $status '
    '"$request" $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /etc/nginx/logs/access_log.log main;


    # don't send the nginx version number in error pages and Server header
    server_tokens off;

    # Redirect to python server
    upstream app {
        server                      app:8000 fail_timeout=0;
    }

    #redirect all http to https
    server {
        listen                      8080 default_server;
        listen                      [::]:8080 default_server;
        server_name                 _;
        return                      301 https://$host$request_uri;
    }

    server {

        #setting up Docker DNS resolver, valid time is set to low to let nginx know quickly if someting is down 
        resolver 127.0.0.11 valid=30s;

        #setting upstram app variable 
        set $upstream_app app;

        listen                      443 ssl http2;
        server_name                 app;
        keepalive_timeout           5;

        #SSL operations consume extra CPU resources. there are 2 ways to mitigate the problem
            #enable keepalive connection to send several req. via one conection
            #Reusing SSL session parameters to avoid SSL handshakes for parallel and subsequent connections
        
        ssl_prefer_server_ciphers   on;
        ssl_session_timeout         1d;
        ssl_session_cache           shared:SSL:50m;

        #ssl tickets is an alternative to the ssl cache
        ssl_session_tickets         off;
        
        ssl_protocols               TLSv1.2 TLSv1.3;
        ssl_certificate             /etc/nginx/ssl/app.crt;
        ssl_certificate_key         /etc/nginx/ssl/app.key;
        ssl_ciphers                 EECDH+AESGCM:EDH+AESGCM:ECDHE-RSA-AES128-GCM-SHA256:AES256+EECDH:DHE-RSA-AES128-GCM-SHA256:AES256+EDH:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4;

        proxy_cookie_path           / "/; HTTPOnly; Secure";
        add_header                  'Referrer-Policy' 'origin';

        # config to don't allow the browser to render the page inside an frame or iframe
        # and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
        add_header                  X-Frame-Options SAMEORIGIN;

        # to disable content-type sniffing on some browsers.
        add_header                  X-Content-Type-Options "nosniff";

        # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
        add_header                  X-XSS-Protection "1; mode=block" always;  

        # avoid click-jacking attack by
        add_header                  Content-Security-Policy "frame-ancestors 'self';";

        #forces to use https by the browser, eventhoughwe forwards itthis may slightly increase the web performance and slighly decrese the server load
        add_header                  Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";

        location / {
            #pass all request to the proxied server
            proxy_pass              https://$upstream_app;

            proxy_set_header        X-Real-IP           $remote_addr;
            proxy_set_header        X-Forwarded-For     $proxy_add_x_forwarded_for;
            proxy_set_header        X-Forwarded-Proto   $scheme;
            proxy_set_header        Host                $host;
            
            #handling slow clients
            proxy_buffers 16 4k;
            proxy_buffer_size 2k;
        }

        
    }



}
